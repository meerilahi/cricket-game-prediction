{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.decomposition import PCA\n","from sklearn.metrics import (\n","    accuracy_score, precision_score, recall_score, f1_score,\n","    classification_report, confusion_matrix, ConfusionMatrixDisplay,\n","    roc_auc_score, roc_curve, auc, precision_recall_curve)\n","from sklearn.ensemble import RandomForestClassifier\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import kagglehub"],"metadata":{"id":"XqhH5ivOSCgG","executionInfo":{"status":"ok","timestamp":1744227486580,"user_tz":-300,"elapsed":14385,"user":{"displayName":"Taimoor Ul Islam","userId":"11174698859917511060"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WWlOkGGxKhmU","outputId":"59321825-e52f-4690-f793-ec650e07a8c7","executionInfo":{"status":"ok","timestamp":1744227493130,"user_tz":-300,"elapsed":6546,"user":{"displayName":"Taimoor Ul Islam","userId":"11174698859917511060"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading from https://www.kaggle.com/api/v1/datasets/download/patrickb1912/ipl-complete-dataset-20082020?dataset_version_number=3...\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1.82M/1.82M [00:00<00:00, 88.7MB/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting files...\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["Path to dataset files: /root/.cache/kagglehub/datasets/patrickb1912/ipl-complete-dataset-20082020/versions/3\n","/root/.cache/kagglehub/datasets/patrickb1912/ipl-complete-dataset-20082020/versions/3\n","deliveries.csv\tmatches.csv\n"]}],"source":["path = kagglehub.dataset_download(\"patrickb1912/ipl-complete-dataset-20082020\")\n","print(\"Path to dataset files:\", path)\n","%cd /root/.cache/kagglehub/datasets/patrickb1912/ipl-complete-dataset-20082020/versions/3\n","!ls"]},{"cell_type":"code","source":["matches = pd.read_csv(\"matches.csv\", usecols=[ 'team1', 'team2', 'winner', 'venue', 'toss_winner', 'toss_decision'])\n","\n","# matches = matches.replace({\"Royal Challengers Bangalore\" : \"Royal Challengers Bengaluru\", \"Rising Pune Supergiants\": \"Rising Pune Supergiant\"})\n","\n","team_name_mapping = {\n","    'Delhi Daredevils': 'Delhi Capitals',\n","    'Kings XI Punjab': 'Punjab Kings',\n","    'Rising Pune Supergiants': 'Pune Warriors',\n","    'Rising Pune Supergiant': 'Pune Warriors',\n","    'Gujarat Lions': 'Gujarat Titans',\n","    'Deccan Chargers': 'Sunrisers Hyderabad',\n","    'Royal Challengers Bengaluru': 'Royal Challengers Bangalore',\n","}\n","\n","matches = matches.replace(team_name_mapping)\n","\n","def standardize_venue(venue):\n","    venue = venue.replace(\", Mumbai\", \"\").replace(\", Delhi\", \"\").replace(\", Bengaluru\", \"\").replace(\", Pune\",\"\")\n","    venue = venue.replace(\", Chepauk\", \"\").replace(\", Lucknow\", \"\").replace(\", Jaipur\", \"\").replace(\", Uppal\",\"\")\n","    venue = venue.replace(\", Ahmedabad\", \"\").replace(\", Hyderabad\", \"\").replace(\", Visakhapatnam\", \"\").replace(\", Mullanpur\",\"\")\n","    venue = venue.replace(\", Dharamsala\", \"\").replace(\", Chandigarh\", \"\").replace(\", Kolkata\", \"\").replace(\", Jamtha\",\"\").replace(\", Chennai\",\"\")\n","    venue = venue.replace(\", Abu Dhabi\", \"\").replace(\", Guwahati\", \"\").replace(\"M Chinnaswamy Stadium\", \"M Chinnaswamy Stadium\")\n","    venue = venue.replace(\"Dr DY Patil Sports Academy\", \"Dr. DY Patil Sports Academy\").replace(\", Mohali\",\"\").replace(\", Ranchi\",\"\")\n","    venue = venue.replace(\"M.Chinnaswamy Stadium\", \"M Chinnaswamy Stadium\")\n","    return venue.strip()\n","\n","def orderfeatures(row):\n","    row = row.copy()\n","    if row['team1'] > row['team2']:\n","        row['team1'], row['team2'] = row['team2'], row['team1']\n","    return row\n","\n","matches['venue'] = matches['venue'].apply(standardize_venue)\n","matches = matches.apply(orderfeatures, axis = 1)\n","matches['toss_winner'] = (matches['toss_winner'] == matches['team1']).astype(int)\n","matches['toss_decision'] = (matches['toss_decision'] == 'field').astype(int)\n","matches['winner'] = (matches['winner'] == matches['team1']).astype(int)\n","matches = matches.iloc[:,::-1]"],"metadata":{"id":"2-9e42OP6SIE","executionInfo":{"status":"ok","timestamp":1744227542564,"user_tz":-300,"elapsed":98,"user":{"displayName":"Taimoor Ul Islam","userId":"11174698859917511060"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["encoder = LabelEncoder()\n","encoder.fit(pd.concat([matches['team1'], matches['team2']]).unique())\n","matches['team1'] = encoder.transform(matches['team1'])\n","matches['team2'] = encoder.transform(matches['team2'])\n","matches['venue'] = encoder.fit_transform(matches['venue'])"],"metadata":{"id":"-8t4aCXGwulD","executionInfo":{"status":"ok","timestamp":1744227544583,"user_tz":-300,"elapsed":6,"user":{"displayName":"Taimoor Ul Islam","userId":"11174698859917511060"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["matches.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AVk7j2RiD7EB","executionInfo":{"status":"ok","timestamp":1744227546176,"user_tz":-300,"elapsed":13,"user":{"displayName":"Taimoor Ul Islam","userId":"11174698859917511060"}},"outputId":"1f91518b-5b62-4b89-a896-68d01d8d324f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1095 entries, 0 to 1094\n","Data columns (total 6 columns):\n"," #   Column         Non-Null Count  Dtype\n","---  ------         --------------  -----\n"," 0   winner         1095 non-null   int64\n"," 1   toss_decision  1095 non-null   int64\n"," 2   toss_winner    1095 non-null   int64\n"," 3   team2          1095 non-null   int64\n"," 4   team1          1095 non-null   int64\n"," 5   venue          1095 non-null   int64\n","dtypes: int64(6)\n","memory usage: 51.5 KB\n"]}]},{"cell_type":"code","source":["X = matches.iloc[:,1:]\n","y = matches.iloc[:,0]\n","SPLIT_INDEX = int(len(X) * 0.90)\n","X_train, X_test = X[:SPLIT_INDEX], X[SPLIT_INDEX:]\n","y_train, y_test = y[:SPLIT_INDEX], y[SPLIT_INDEX:]"],"metadata":{"id":"Bjrc4FAyYWoK","executionInfo":{"status":"ok","timestamp":1744227548628,"user_tz":-300,"elapsed":7,"user":{"displayName":"Taimoor Ul Islam","userId":"11174698859917511060"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# pca = PCA(n_components=0.7)\n","# X_train_pca = pca.fit_transform(X_train)\n","# X_test_pca = pca.transform(X_test)\n","\n","\n","rf_model = RandomForestClassifier(\n","    n_estimators=250,\n","    max_depth=None,\n","    # class_weight='balanced',\n","    random_state=42,\n","    n_jobs=-1\n",")\n","rf_model.fit(X_train, y_train)\n","y_pred = rf_model.predict(X_test)\n","y_proba = rf_model.predict_proba(X_test)[:, 1]\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","print(f'Accuracy: {accuracy * 100:.2f}%')\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mXm7J7RO7-ST","outputId":"ed58dd9a-aa8e-4163-dad6-196efb3e3ca9","executionInfo":{"status":"ok","timestamp":1744227587166,"user_tz":-300,"elapsed":1464,"user":{"displayName":"Taimoor Ul Islam","userId":"11174698859917511060"}}},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 60.91%\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.55      0.58      0.57        48\n","           1       0.66      0.63      0.64        62\n","\n","    accuracy                           0.61       110\n","   macro avg       0.61      0.61      0.61       110\n","weighted avg       0.61      0.61      0.61       110\n","\n"]}]}]}